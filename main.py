import telebot
import os
import re
import platform
import cryptocompare
import coinaddrvalidator
import pytz
from datetime import datetime
from threading import Lock
from config_parser import ConfigParser
from frontend import Bot_inline_btns
from backend import DbAct
from db import DB

config_name = 'secrets.json'


def verify_user_text(user_input: str) -> bool:
    if user_input is not None and user_input != '':
        return True
    return False


def verify_user_float(user_input: str) -> bool:
    if not verify_user_text(user_input):
        return False
    try:
        float(user_input)
        return True
    except ValueError:
        return False


def validate_crypto_wallet(coin, address):
    try:
        patterns = {
            'BTC': r'^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$',
            'USDT': r'^T[1-9A-HJ-NP-Za-km-z]{33}$',
            'BCH': r'^([13CH][a-zA-HJ-NP-Z0-9]{25,39}|q[0-9a-z]{41})$',
            'DASH': r'^X[1-9A-HJ-NP-Za-km-z]{33}$',
            'DOGE': r'^(D|A|9)[1-9A-HJ-NP-Za-km-z]{33}$',
            'ETH': r'^0x[a-fA-F0-9]{40}$',
            'LTC': r'^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$',
            'BNB': r'^(bnb1)[0-9a-z]{38}$',
            'SOL': r'^[1-9A-HJ-NP-Za-km-z]{32,44}$',
            'TONCOIN': r'^EQ[A-Za-z0-9_-]{47}$',
        }

        pattern = patterns.get(coin.upper())
        if pattern and re.match(pattern, address):
            return True
        else:
            return False
    except:
        return False


def clear_local_states(user_id):
    db_actions.set_user_system_key(user_id, "quantity_user", None)
    db_actions.set_user_system_key(user_id, "destination_address", None)


def validate_mir(card_number):
    def luhn_checksum(card_number):
        def digits_of(n):
            return [int(d) for d in str(n)]

        digits = digits_of(card_number.replace(' ', ''))
        odd_digits = digits[-1::-2]
        even_digits = digits[-2::-2]
        checksum = sum(odd_digits)
        for d in even_digits:
            checksum += sum(digits_of(d * 2))
        return checksum % 10 == 0 or checksum % 10 == 1 or checksum % 10 == 2 or checksum % 10 == 3 or checksum % 10 == 4 or checksum % 10 == 5 or checksum % 10 == 6 or checksum % 10 == 7 or checksum % 10 == 8 or checksum % 10 == 9

    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–∑ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        card_number = card_number.replace(' ', '')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        if len(card_number) != 16:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        if not card_number.startswith('220'):
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ—É–Ω–∞
        return luhn_checksum(card_number)
    except:
        return False


def get_current_time():
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)
    return moscow_time.strftime("%d.%m.%Y, %H:%M")


def current_crypto_price(currency_symbol):
    try:
        price = cryptocompare.get_price(currency_symbol, currency='RUB')
        return price[currency_symbol]['RUB']
    except Exception as e:
        return False


def back_method(user_id, command):
    if command == '<back>':
        try:
            message_ids = db_actions.get_user_system_key(user_id, "backward_message")
            db_actions.set_user_system_key(user_id, "backward_message", message_ids[:-1])
            message_id = message_ids[-1]
            bot.delete_message(user_id, message_id)
            return False
        except Exception as e:
            return True
    return True


def send_message(user_id, args, buttons=None, parse_mode=None):
    message_id = None

    if buttons is None and parse_mode is None:
        message_id = bot.send_message(*args).message_id
    elif buttons is not None and parse_mode is None:
        message_id = bot.send_message(*args, reply_markup=buttons).message_id
    elif buttons is None and parse_mode is not None:
        message_id = bot.send_message(*args, parse_mode=parse_mode).message_id
    elif buttons is not None and parse_mode is not None:
        message_id = bot.send_message(*args, parse_mode=parse_mode, reply_markup=buttons).message_id

    message_ids = db_actions.get_user_system_key(user_id, "backward_message")
    message_ids.append(message_id)
    db_actions.set_user_system_key(user_id, "backward_message", message_ids)


def calculate_exchange_price(give_currency, give_quantity, get_currency):
    give_currency_price = db_actions.get_exchange_rate_by_name(give_currency)
    get_currency_price = db_actions.get_exchange_rate_by_name(get_currency)
    return round(((float(give_quantity) * float(give_currency_price)) / float(get_currency_price)), 2)


def main():
    @bot.message_handler(commands=['start', 'admin', 'buy', 'sell'])  # 'exchange'
    def start(message):
        command = message.text.replace('/', '')
        user_id = message.from_user.id
        group_id = message.chat.id
        chat_type = message.chat.type
        buttons = Bot_inline_btns()
        db_actions.add_user(user_id, message.from_user.first_name, message.from_user.last_name,
                            f'@{message.from_user.username}')
        db_actions.add_group(group_id, chat_type)
        if command == 'start':
            bot.send_message(user_id,
                             '<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n'
                             'ü§ñ–Ø –±–æ—Ç –¥–ª—è <u>–ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏—è, –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</u> ‚úÖ\n\n'
                             '/buy - üí∞ –ø–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã üí∞\n\n'
                             '/sell - üí∏ –ø—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã üí∏\n\n',
                             parse_mode='HTML')
            # /exchange - ü§ë –æ–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ü§ë
        elif command == 'buy':
            buy_buttons = db_actions.get_exchange_rates("buy")
            send_message(user_id, [user_id,
                                   'üí∞–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ <u>–∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</u> –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É <b><u>–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!</u></b>üí∞\n\n'
                                   '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:'], buttons=buttons.buy_crypto_btns(buy_buttons),
                         parse_mode='HTML')
        elif command == 'sell':
            sell_buttons = db_actions.get_exchange_rates("sell")
            send_message(user_id, [user_id,
                                   'üí∏–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ <u>–ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</u> –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É <b><u>–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!</u></b>üí∏\n\n'
                                   '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:'], buttons=buttons.sell_crypto_btns(sell_buttons),
                         parse_mode='HTML')
        # elif command == 'exchange':
        #     exchange_buttons = db_actions.get_exchange_rates("exchange")
        #     send_message(user_id, [user_id, 'ü§ë–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ <u>–æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</u> –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É <b><u>–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!</u></b>ü§ë\n\n'
        #                               '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –º–µ–Ω—è—Ç—å:'], buttons=buttons.exchange_crypto_btns(exchange_buttons), parse_mode='HTML')
        elif db_actions.user_is_admin(user_id):
            if command == 'admin':
                bot.send_message(user_id, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! ‚úÖ',
                                 reply_markup=buttons.admin_btns())

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        user_id = call.message.chat.id
        buttons = Bot_inline_btns()
        if db_actions.user_is_existed(user_id):
            if db_actions.user_is_admin(user_id):

                ############################################### ADMIN #################################################

                if call.data == 'add_exchange_rate':
                    db_actions.set_user_system_key(user_id, "admin_action", "add")
                    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å',
                                     reply_markup=buttons.select_exchange_direction())
                elif call.data == 'del_exchange_rate':
                    db_actions.set_user_system_key(user_id, "admin_action", "del")
                    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å',
                                     reply_markup=buttons.select_exchange_direction())
                elif call.data[:6] == 'select':
                    direction = call.data[7:]
                    action = db_actions.get_user_system_key(user_id, "admin_action")
                    if action == "del":
                        direction_data = db_actions.get_exchange_rates(type=direction)
                        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                         reply_markup=buttons.direction_buttons(direction_data, admin=True))
                    elif action == "add":
                        db_actions.set_user_system_key(user_id, "admin_exchange_direction", direction)
                        db_actions.set_user_system_key(user_id, "index", 0)
                        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞")
                elif call.data[:17] == 'del_exchange_rate':
                    db_actions.del_exchange_rates(row_id=call.data[17:])
                    bot.send_message(user_id, "‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ")
                elif call.data == 'export':
                    db_actions.db_export_xlsx()
                    bot.send_document(user_id, open(config.get_config()['xlsx_path'], 'rb'))
                    os.remove(config.get_config()['xlsx_path'])

            ################################################## BUY ####################################################

            if call.data[:9] == 'first_buy':
                if back_method(user_id, call.data[9:]):
                    clear_local_states(user_id)
                    db_actions.set_user_system_key(user_id, "user_currency_order", call.data[9:])
                    exchange_currency = db_actions.get_exchange_rate(call.data[9:])
                    send_message(user_id, [user_id, f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {exchange_currency[0]}\n\n'
                                                    f'–¶–µ–Ω–∞ –∑–∞ 1 {exchange_currency[0]} - {round(exchange_currency[1], 2)}‚ÇΩ'],
                                 buttons=buttons.buy_request_btns())
            elif call.data == 'start':
                bot.send_message(user_id,
                                 '<b>–ü—Ä–∏–≤–µ—Ç, —Ö–æ—á–µ—à—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –µ—â–µ –æ–±–º–µ–Ω? üëã</b>\n\n'
                                 '<u>–≤—ã–±–∏—Ä–∞–π –∫–æ–º–∞–Ω–¥—É —Å–Ω–∏–∑—É!</u> ‚úÖ\n\n'
                                 '/buy - üí∞ –ø–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã üí∞\n\n'
                                 '/sell - üí∏ –ø—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã üí∏\n\n',
                                 parse_mode='HTML')
            elif call.data == 'buy_quantity':
                db_actions.set_user_system_key(user_id, "index", 3)
                bot.send_message(user_id, 'üí∏–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É üí∏')
            elif call.data == 'buy_address':
                db_actions.set_user_system_key(user_id, "index", 4)
                bot.send_message(user_id, 'üí≥ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ üí≥')
            elif call.data[:12] == 'buy_continue':
                if back_method(user_id, call.data[12:]):
                    # 1 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—É—é –º–µ–Ω—è–µ–º 2 - –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è 3 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞–µ–º
                    quantity_first = db_actions.get_user_system_key(user_id, "quantity_user")
                    dest_address = db_actions.get_user_system_key(user_id, "destination_address")

                    if quantity_first is None:
                        bot.send_message(user_id, '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã! ‚ùå')

                    elif dest_address is None:
                        bot.send_message(user_id, '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è! ‚ùå')
                    else:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç—ã –∏ –µ–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ 0 - currency, 1 - cost
                        crypto_data = db_actions.get_exchange_rate(
                            db_actions.get_user_system_key(user_id, "user_currency_order"))
                        quantity_second = db_actions.get_user_system_key(user_id, "quantity_user") * crypto_data[1]
                        first_crypto = crypto_data[0]
                        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        application_id = db_actions.add_application(user_id=user_id,
                                                                    source_currency="RUB",
                                                                    source_quantity=quantity_second,
                                                                    target_currency=first_crypto,
                                                                    target_quantity=quantity_first,
                                                                    destination_address=dest_address)
                        if application_id:

                            db_actions.set_user_system_key(user_id, "user_application_id", application_id)

                            send_message(user_id, [user_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ!\n\n'
                                                            f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n\n'
                                                            f'–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ {quantity_first} {first_crypto} –∑–∞ {round(quantity_second, 2)} ‚ÇΩ\n'
                                                            f'–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å: '
                                                            f'{first_crypto}: {dest_address}\n\n'
                                                            f'–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {quantity_second} ‚ÇΩ '
                                                            f'–Ω–∞ –Ω–æ–º–µ—Ä\nüí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥\n'
                                                            '<code>4536 6363 6262 6636</code>\n'
                                                            'üí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥\n–∫–∞—Ä—Ç–∞ –ú–ò–† –ï–≤–≥–µ–Ω–∏–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á –ö.\n\n'
                                                            f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: "–Ø –æ–ø–ª–∞—Ç–∏–ª"\n'
                                                            f'–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç'], parse_mode="HTML",
                                         buttons=buttons.buy_btns())
                        else:
                            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ ‚ùå")
            elif call.data[:3] == 'buy':
                if back_method(user_id, call.data[3:]):
                    exchange_currency = db_actions.get_exchange_rate(
                        db_actions.get_user_system_key(user_id, "user_currency_order"))
                    rub_cost = db_actions.get_user_system_key(user_id, "quantity_user") * exchange_currency[1]
                    application_id = db_actions.get_user_system_key(user_id, "user_application_id")
                    user_data = db_actions.get_name_user(user_id)
                    application = db_actions.get_application(application_id)
                    time_now = get_current_time()
                    topic_id = telebot.TeleBot.create_forum_topic(bot, chat_id=config.get_config()['group_id'],
                                                                  name=f'{user_data[1]} '
                                                                       f'{user_data[2]} –ü–û–ö–£–ü–ö–ê {exchange_currency[0]}',
                                                                  icon_color=0x6FB9F0).message_thread_id
                    db_actions.update_topic_id(user_id, topic_id)
                    bot.send_message(chat_id=config.get_config()['group_id'], message_thread_id=topic_id,
                                     text=f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n'
                                          f'–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {time_now} –ú–°–ö\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data[0]}\n'
                                          f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞: –ö–∞—Ä—Ç–∞ -> {exchange_currency[0]}\n'
                                          f'–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {round(rub_cost, 2)}‚ÇΩ\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {exchange_currency[0]} –Ω–∞ –ø–æ–∫—É–ø–∫—É: {application[0]} {exchange_currency[0]}\n'
                                          f'–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: <code>{application[1]}</code>',
                                     parse_mode='HTML', reply_markup=buttons.topic_btns(application_id))
                    bot.send_message(user_id, '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ! ‚è≥')

            ################################################## SELL ####################################################

            elif call.data[:10] == 'first_sell':
                if back_method(user_id, call.data[10:]):
                    clear_local_states(user_id)
                    db_actions.set_user_system_key(user_id, "user_currency_order", call.data[10:])
                    exchange_currency = db_actions.get_exchange_rate(call.data[10:])
                    send_message(user_id, [user_id, f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {exchange_currency[0]}\n\n'
                                                    f'–¶–µ–Ω–∞ –∑–∞ 1 {exchange_currency[0]} - {round(exchange_currency[1], 2)}‚ÇΩ'],
                                 buttons=buttons.sell_request_btns())
            elif call.data == 'sell_quantity':
                db_actions.set_user_system_key(user_id, "index", 6)
                bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É')
            elif call.data == 'sell_address':
                db_actions.set_user_system_key(user_id, "index", 7)
                bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–ú–ò–†)')
            elif call.data[:13] == 'sell_continue':
                if back_method(user_id, call.data[13:]):
                    # 1 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—É—é –º–µ–Ω—è–µ–º 2 - –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è 3 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞–µ–º
                    quantity_first = db_actions.get_user_system_key(user_id, "quantity_user")
                    dest_address = db_actions.get_user_system_key(user_id, "destination_address")

                    if quantity_first is None:
                        bot.send_message(user_id, '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–≤–∞–µ–º–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã! ‚ùå')

                    elif dest_address is None:
                        bot.send_message(user_id, '‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è! ‚ùå')
                    else:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç—ã –∏ –µ–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ 0 - currency, 1 - cost
                        crypto_data = db_actions.get_exchange_rate(
                            db_actions.get_user_system_key(user_id, "user_currency_order"))
                        quantity_second = db_actions.get_user_system_key(user_id, "quantity_user") * crypto_data[1]
                        first_crypto = crypto_data[0]
                        crypto_address = crypto_data[3]
                        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        application_id = db_actions.add_application(user_id=user_id,
                                                                    source_currency=first_crypto,
                                                                    source_quantity=quantity_first,
                                                                    target_currency="RUB",
                                                                    target_quantity=quantity_second,
                                                                    destination_address=dest_address)
                        if application_id:
                            db_actions.set_user_system_key(user_id, "user_application_id", application_id)
                            send_message(user_id, [user_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ!\n\n'
                                                            f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n\n'
                                                            f'–í—ã –ø—Ä–æ–¥–∞–µ—Ç–µ {quantity_first} {first_crypto} –∑–∞ {round(quantity_second, 2)} ‚ÇΩ\n'
                                                            f'–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É: '
                                                            f'{dest_address}\n\n'
                                                            f'–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {quantity_first} {first_crypto} '
                                                            f'–Ω–∞ –∞–¥—Ä–µ—Å\nüí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥\n'
                                                            f'<code>{crypto_address}</code>\n'
                                                            'üí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥\n'
                                                            f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: "–Ø –æ–ø–ª–∞—Ç–∏–ª"\n'
                                                            f'–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏'],
                                         buttons=buttons.sell_btns(), parse_mode='HTML')
                        else:
                            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ ‚ùå")
            elif call.data[:4] == 'sell':
                if back_method(user_id, call.data[4:]):
                    quantity_first = db_actions.get_user_system_key(user_id, "quantity_user")
                    exchange_currency = db_actions.get_exchange_rate(
                        db_actions.get_user_system_key(user_id, "user_currency_order"))
                    rub_cost = db_actions.get_user_system_key(user_id, "quantity_user") * exchange_currency[1]
                    application_id = db_actions.get_user_system_key(user_id, "user_application_id")
                    user_data = db_actions.get_name_user(user_id)
                    application = db_actions.get_application(application_id)
                    time_now = get_current_time()
                    topic_id = telebot.TeleBot.create_forum_topic(bot, chat_id=config.get_config()['group_id'],
                                                                  name=f'{user_data[1]} '
                                                                       f'{user_data[2]} –ü–†–û–î–ê–ñ–ê {exchange_currency[0]}',
                                                                  icon_color=0x6FB9F0).message_thread_id
                    db_actions.update_topic_id(user_id, topic_id)
                    bot.send_message(chat_id=config.get_config()['group_id'], message_thread_id=topic_id,
                                     text=f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n'
                                          f'–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {time_now} –ú–°–ö\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data[0]}\n'
                                          f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞: {exchange_currency[0]} -> –ö–ê–†–¢–ê\n'
                                          f'–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {round(rub_cost, 2)}‚ÇΩ\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {exchange_currency[0]} –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {quantity_first} {exchange_currency[0]}\n'
                                          f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <code>{application[1]}</code>',
                                     parse_mode='HTML', reply_markup=buttons.sell_topic_btns(application_id))
                    bot.send_message(user_id, '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ! ‚è≥')

            ############################################### EXCHANGE ##################################################

            elif call.data[:14] == 'first_exchange':
                if back_method(user_id, call.data[14:]):
                    clear_local_states(user_id)
                    db_actions.set_user_system_key(user_id, "user_first_exchange", call.data[14:])
                    exchange_buttons = db_actions.get_exchange_rates("exchange")
                    send_message(user_id, [user_id, f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –º–µ–Ω—è—Ç—å'],
                                 buttons=buttons.exchange_btns(exchange_buttons, call.data[14:]))
            elif call.data[:16] == 'request_exchange':
                if back_method(user_id, call.data[16:]):
                    db_actions.set_user_system_key(user_id, "user_second_exchange", call.data[16:])

                    first_currency_id = db_actions.get_user_system_key(user_id, "user_first_exchange")
                    second_currency_id = db_actions.get_user_system_key(user_id, "user_second_exchange")

                    first_currency_data = db_actions.get_exchange_rate(first_currency_id)
                    second_currency_data = db_actions.get_exchange_rate(second_currency_id)
                    send_message(user_id, [user_id,
                                           f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞ {first_currency_data[0]} –Ω–∞ {second_currency_data[0]}\n\n'],
                                 buttons=buttons.exchange_request_btns())
            elif call.data == 'exchange_quantity':
                db_actions.set_user_system_key(user_id, "index", 8)
                bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –æ–±–º–µ–Ω')
            elif call.data == 'exchange_address':
                db_actions.set_user_system_key(user_id, "index", 9)
                bot.send_message(user_id, 'üí≥ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ üí≥')
            elif call.data[:17] == 'exchange_continue':
                if back_method(user_id, call.data[17:]):
                    # 1 - –∫—Ä–∏–ø—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É 2 - –∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
                    first_crypto = \
                        db_actions.get_exchange_rate(
                            db_actions.get_user_system_key(user_id, "user_first_exchange"))[0]
                    second_crypto = \
                        db_actions.get_exchange_rate(
                            db_actions.get_user_system_key(user_id, "user_second_exchange"))[0]
                    crypto_address = db_actions.get_exchange_rate(db_actions.get_user_system_key(user_id, "user_second_exchange"))[3]

                    # 1 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—É—é –º–µ–Ω—è–µ–º 2 - –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è 3 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞–µ–º
                    quantity_first = db_actions.get_user_system_key(user_id, "quantity_user")
                    dest_address = db_actions.get_user_system_key(user_id, "destination_address")

                    if quantity_first is None:
                        bot.send_message(user_id, f'‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {first_crypto}! ‚ùå')

                    elif dest_address is None:
                        bot.send_message(user_id, f'‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å {second_crypto} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è! ‚ùå')
                    else:
                        quantity_second = calculate_exchange_price(first_crypto, quantity_first, second_crypto)
                        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        application_id = db_actions.add_application(user_id=user_id,
                                                                    source_currency=first_crypto,
                                                                    source_quantity=quantity_first,
                                                                    target_currency=second_crypto,
                                                                    target_quantity=quantity_second,
                                                                    destination_address=dest_address)
                        if application_id:
                            db_actions.set_user_system_key(user_id, "user_application_id", application_id)
                            send_message(user_id, [user_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ!\n\n'
                                                            f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n\n'
                                                            f'–í—ã –º–µ–Ω—è–µ—Ç–µ {quantity_first} {first_crypto} –∑–∞ {quantity_second} {second_crypto}\n'
                                                            f'–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫: '
                                                            f'{dest_address}\n\n'
                                                            f'–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {quantity_first} {first_crypto} '
                                                            f'–Ω–∞ –∞–¥—Ä–µ—Å\nüí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥\n'
                                                            f'<code>{crypto_address}</code>\n'
                                                            'üí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥üí≥\n'
                                                            f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: "–Ø –æ–ø–ª–∞—Ç–∏–ª"\n'
                                                            f'–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏'],
                                         buttons=buttons.exchange(), parse_mode='HTML')
                        else:
                            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ ‚ùå")
            elif call.data[:8] == 'exchange':
                if back_method(user_id, call.data[8:]):
                    # 1 - –∫—Ä–∏–ø—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É 2 - –∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
                    first_crypto = \
                    db_actions.get_exchange_rate(db_actions.get_user_system_key(user_id, "user_first_exchange"))[0]
                    second_crypto = \
                    db_actions.get_exchange_rate(db_actions.get_user_system_key(user_id, "user_second_exchange"))[0]

                    # 1 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—É—é –º–µ–Ω—è–µ–º 2 - –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è 3 - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞–µ–º
                    quantity_first = db_actions.get_user_system_key(user_id, "quantity_user")
                    quantity_second = calculate_exchange_price(first_crypto, quantity_first, second_crypto)
                    exchange_currency = db_actions.get_exchange_rate(
                        db_actions.get_user_system_key(user_id, "user_currency_order"))
                    application_id = db_actions.get_user_system_key(user_id, "user_application_id")
                    user_data = db_actions.get_name_user(user_id)
                    application = db_actions.get_application(application_id)
                    time_now = get_current_time()
                    topic_id = telebot.TeleBot.create_forum_topic(bot, chat_id=config.get_config()['group_id'],
                                                                  name=f'{user_data[1]} '
                                                                       f'{user_data[2]} –û–ë–ú–ï–ù {exchange_currency[0]}',
                                                                  icon_color=0x6FB9F0).message_thread_id
                    db_actions.update_topic_id(user_id, topic_id)
                    bot.send_message(chat_id=config.get_config()['group_id'], message_thread_id=topic_id,
                                     text=f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n'
                                          f'–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {time_now} –ú–°–ö\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data[0]}\n'
                                          f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞: {first_crypto} -> {second_crypto}\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {first_crypto} –Ω–∞ –æ–±–º–µ–Ω: {quantity_first} {first_crypto}\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {second_crypto} –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ: {quantity_second} {second_crypto}\n'
                                          f'–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: <code>{application[1]}</code>',
                                     parse_mode='HTML', reply_markup=buttons.topic_btns(application_id))
                    bot.send_message(user_id, '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ! ‚è≥')

        ############################################### ADMIN_APPLICATIONS #########################################################

        elif db_actions.group_is_existed(user_id):
            if call.data[:7] == 'confirm':
                print('123')
                application_id = call.data[7:]
                bot.send_message(chat_id=config.get_config()['group_id'],
                                 message_thread_id=call.message.reply_to_message.message_thread_id,
                                 text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                ## –≤—Å–µ –∫–ª—é—á–∏ –≤–æ—Ä–∫–∞—é—Ç —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–∑—É–π "set_group_system_key" –∏ "get_group_system_key"
                db_actions.set_group_system_key(user_id, "index", 0)
                db_actions.set_group_system_key(user_id, "admin_application_id", application_id)
            elif call.data[:12] == 'sell_confirm':
                application_id = call.data[12:]
                user_datas = db_actions.get_datas_from_application(application_id)
                bot.send_message(chat_id=user_datas[0],
                                 text=f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n'
                                      f'–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n'
                                      f'–í—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ú–°–ö: {get_current_time()}\n'
                                      f'–í—ã –ø—Ä–æ–¥–∞–ª–∏ {user_datas[5]} {user_datas[4]} –∑–∞ {round(user_datas[3], 2)} {user_datas[2]}\n'
                                      f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!',
                                 reply_markup=buttons.new_application_btns(),
                                 parse_mode='HTML')
                bot.send_message(chat_id=config.get_config()['group_id'],
                                 message_thread_id=call.message.reply_to_message.message_thread_id,
                                 text='–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!')
            elif call.data == 'close_application':
                application_id = db_actions.get_group_system_key(user_id, "admin_application_id")
                user_datas = db_actions.get_datas_from_application(application_id)
                bot.send_message(chat_id=user_datas[0],
                                 text=f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n'
                                      f'–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n'
                                      f'–í—Ä–µ–º—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ú–°–ö: {get_current_time()}\n'
                                      f'–í—ã –∫—É–ø–∏–ª–∏ {user_datas[5]} {user_datas[4]} –∑–∞ {round(user_datas[3], 2)} {user_datas[2]}\n'
                                      f'–ê–¥—Ä–µ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{user_datas[1]}</code>\n\n'
                                      f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!',
                                 reply_markup=buttons.new_application_btns(),
                                 parse_mode='HTML')
                bot.send_message(chat_id=config.get_config()['group_id'],
                                 message_thread_id=call.message.reply_to_message.message_thread_id,
                                 text='–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!')
            elif call.data[:6] == 'reject':
                application_id = call.data[6:]
                db_actions.set_group_system_key(user_id, "admin_application_id", application_id)
                db_actions.set_group_system_key(user_id, "index", 1)
                bot.send_message(chat_id=config.get_config()['group_id'],
                                 message_thread_id=call.message.reply_to_message.message_thread_id,
                                 text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã!')
            elif call.data == 'close_reject_application':
                application_id = db_actions.get_group_system_key(user_id, "admin_application_id")
                reason_reject = db_actions.get_group_system_key(user_id, "reason_reject_admin")
                user_datas = db_actions.get_datas_from_application(application_id)
                bot.send_message(chat_id=user_datas[0],
                                 text=f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {application_id}\n'
                                      f'–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n'
                                      f'–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ –ú–°–ö: {get_current_time()}\n'
                                      f'–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: {reason_reject}', reply_markup=buttons.new_application_btns())
                bot.send_message(chat_id=config.get_config()['group_id'],
                                 message_thread_id=call.message.reply_to_message.message_thread_id,
                                 text='–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')

    @bot.message_handler(content_types=['text', 'photo'])
    def text_message(message):
        user_input = message.text
        user_id = message.chat.id
        buttons = Bot_inline_btns()
        code = db_actions.get_user_system_key(user_id, "index")
        group_code = db_actions.get_group_system_key(user_id, "index")
        if db_actions.user_is_existed(user_id):
            if db_actions.user_is_admin(user_id):
                if code == 0:
                    if verify_user_text(user_input):
                        crypto_price = current_crypto_price(user_input)
                        if crypto_price:
                            db_actions.set_user_system_key(user_id, "admin_currency_name", user_input)
                            db_actions.set_user_system_key(user_id, "index", 1)
                            bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É –¥–ª—è "
                                                      f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ {user_input} = {crypto_price}‚ÇΩ\n\n"
                                                      f"(>1.0 –¥–ª—è –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ü–µ–Ω–µ / <1.0 –¥–ª—è —É–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ü–µ–Ω–µ)")
                        else:
                            bot.send_message(user_id, "‚ùå –í–≤–µ–¥–µ–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")
                    else:
                        bot.send_message(user_id, "‚ùå –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç ‚ùå")
                elif code == 1:
                    if verify_user_float(user_input):
                        db_actions.set_user_system_key(user_id, "admin_currency_cost", float(user_input))
                        db_actions.set_user_system_key(user_id, "index", 2)
                        bot.send_message(user_id,
                                         "–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∫—É–ø–∏—Ç—å (–ø—Ä–æ–¥–∞—Ç—å/–æ–±–º–µ–Ω—è—Ç—å)?\n\n")
                    else:
                        bot.send_message(user_id, "‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ ‚ùå")
                elif code == 2:
                    if verify_user_float(user_input):
                        db_actions.set_user_system_key(user_id, "crypto_min_cost", float(user_input))
                        coin_name = db_actions.get_user_system_key(user_id, "admin_currency_name")
                        db_actions.set_user_system_key(user_id, "index", 10)
                        bot.send_message(user_id, f'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {coin_name}')
                    else:
                        bot.send_message(user_id, "‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ ‚ùå")
                elif code == 10:
                    if verify_user_text(user_input):
                        direction = db_actions.get_user_system_key(user_id, "admin_exchange_direction")
                        coin_name = db_actions.get_user_system_key(user_id, "admin_currency_name")
                        coin_cost = db_actions.get_user_system_key(user_id, "admin_currency_cost")
                        min_cost = db_actions.get_user_system_key(user_id, "crypto_min_cost")
                        db_actions.add_exchange_rates(coin_name, current_crypto_price(coin_name) * float(coin_cost),
                                                      min_cost, str(user_input), direction)
                        db_actions.set_user_system_key(user_id, "index", None)
                        bot.send_message(user_id, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ")
                    else:
                        bot.send_message(user_id, "‚ùå –≠—Ç–æ –Ω–µ –∞–¥—Ä–µ—Å ‚ùå")
            if code == 3:
                if verify_user_float(user_input):
                    currency_id = db_actions.get_user_system_key(user_id, "user_currency_order")
                    min_cost = db_actions.get_exchange_rate(currency_id)[2]
                    if float(user_input) >= min_cost:
                        exchange_currency = db_actions.get_exchange_rate(currency_id)
                        db_actions.set_user_system_key(user_id, "quantity_user", float(user_input))
                        db_actions.set_user_system_key(user_id, "index", None)
                        bot.send_message(user_id, f'üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ {user_input} {exchange_currency[0]} üí∞')
                        if db_actions.get_user_system_key(user_id, "destination_address") is None:
                            db_actions.set_user_system_key(user_id, "index", 4)
                            bot.send_message(user_id, 'üí≥ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ üí≥')
                    else:
                        bot.send_message(user_id,
                                         f"‚ùå –í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ ({user_input}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ({min_cost}) ‚ùå")
                else:
                    bot.send_message(user_id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! ‚ùå')
            elif code == 4:
                if verify_user_text(user_input):
                    currency_id = db_actions.get_user_system_key(user_id, "user_currency_order")
                    exchange_currency = db_actions.get_exchange_rate(currency_id)
                    if validate_crypto_wallet(exchange_currency[0], user_input):
                        db_actions.set_user_system_key(user_id, "index", None)
                        db_actions.set_user_system_key(user_id, "destination_address", user_input)
                        bot.send_message(user_id, '‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! ‚úÖ', reply_markup=buttons.next_buy_btn())
                        if db_actions.get_user_system_key(user_id, "quantity_user") is None:
                            db_actions.set_user_system_key(user_id, "index", 3)
                            bot.send_message(user_id, 'üí∏–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É üí∏')
                    else:
                        bot.send_message(user_id, '‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! ‚ùå')
                else:
                    bot.send_message(user_id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! ‚ùå')
            elif code == 6:
                if verify_user_float(user_input):
                    currency_id = db_actions.get_user_system_key(user_id, "user_currency_order")
                    min_cost = db_actions.get_exchange_rate(currency_id)[2]
                    if float(user_input) >= min_cost:
                        exchange_currency = db_actions.get_exchange_rate(currency_id)
                        db_actions.set_user_system_key(user_id, "quantity_user", float(user_input))
                        db_actions.set_user_system_key(user_id, "index", None)
                        user_get_cost = float(user_input) * float(exchange_currency[1])
                        bot.send_message(user_id,
                                         f'üí∞ –ó–∞ {user_input} {exchange_currency[0]} –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {round(user_get_cost, 2)}‚ÇΩ üí∞', reply_markup=buttons.sell_next_bnt())
                        if db_actions.get_user_system_key(user_id, "destination_address") is None:
                            db_actions.set_user_system_key(user_id, "index", 7)
                            bot.send_message(user_id, 'üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã üí≥')
                    else:
                        bot.send_message(user_id,
                                         f"‚ùå –í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ ({user_input}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ({min_cost}) ‚ùå")
                else:
                    bot.send_message(user_id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! ‚ùå')
            elif code == 7:
                if verify_user_text(user_input):
                    if validate_mir(user_input):
                        db_actions.set_user_system_key(user_id, "index", None)
                        db_actions.set_user_system_key(user_id, "destination_address", user_input)
                        bot.send_message(user_id, '‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! ‚úÖ', reply_markup=buttons.sell_next_bnt())
                        if db_actions.get_user_system_key(user_id, "quantity_user") is None:
                            db_actions.set_user_system_key(user_id, "index", 6)
                            bot.send_message(user_id, 'üí∏–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É üí∏')
                    else:
                        bot.send_message(user_id, '‚ùå –í–≤–µ–¥–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ–≤–µ—Ä–Ω–∞! ‚ùå\n\n'
                                                  '(–¢–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –ú–ò–†\n'
                                                  '–ü—Ä–∏–º–µ—Ä: 2200 1234 5678 9010)')
                else:
                    bot.send_message(user_id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! ‚ùå')
            elif code == 8:
                if verify_user_float(user_input):
                    currency_id = db_actions.get_user_system_key(user_id, "user_currency_order")
                    min_cost = db_actions.get_exchange_rate(currency_id)[2]
                    first_crypto = \
                    db_actions.get_exchange_rate(db_actions.get_user_system_key(user_id, "user_first_exchange"))[0]
                    second_crypto = \
                    db_actions.get_exchange_rate(db_actions.get_user_system_key(user_id, "user_second_exchange"))[0]
                    quantity_first = db_actions.get_user_system_key(user_id, "quantity_user")
                    quantity_second = calculate_exchange_price(first_crypto, quantity_first, second_crypto)
                    if float(user_input) >= min_cost:
                        db_actions.set_user_system_key(user_id, "quantity_user", float(user_input))
                        db_actions.set_user_system_key(user_id, "index", None)
                        bot.send_message(user_id,
                                         f'üí∞–ó–∞ {user_input} {first_crypto} –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {quantity_second} {second_crypto} üí∞')
                        if db_actions.get_user_system_key(user_id, "destination_address") is None:
                            db_actions.set_user_system_key(user_id, "index", 9)
                            bot.send_message(user_id, 'üí≥ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ üí≥')
                    else:
                        bot.send_message(user_id,
                                         f"‚ùå –í–≤–µ–¥–µ–Ω–Ω–∞—è –≤–∞–º–∏ —Å—É–º–º–∞ ({user_input}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π ({min_cost}) ‚ùå")
                else:
                    bot.send_message(user_id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! ‚ùå')
            elif code == 9:
                first_crypto = \
                db_actions.get_exchange_rate(db_actions.get_user_system_key(user_id, "user_first_exchange"))[0]
                if verify_user_text(user_input):
                    if validate_crypto_wallet(first_crypto, user_input):
                        db_actions.set_user_system_key(user_id, "index", None)
                        db_actions.set_user_system_key(user_id, "destination_address", user_input)
                        bot.send_message(user_id, '‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! ‚úÖ')
                        if db_actions.get_user_system_key(user_id, "quantity_user") is None:
                            db_actions.set_user_system_key(user_id, "index", 8)
                            bot.send_message(user_id, 'üí∏–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –æ–±–º–µ–Ω üí∏')
                    else:
                        bot.send_message(user_id, '‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! ‚ùå')
                else:
                    bot.send_message(user_id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! ‚ùå')
        elif db_actions.group_is_existed(user_id):
            if group_code == 0:
                if verify_user_text(user_input):
                    application_id = db_actions.get_group_system_key(user_id, "admin_application_id")
                    db_actions.add_transaction_address(user_input, application_id)
                    bot.send_message(chat_id=config.get_config()['group_id'],
                                     message_thread_id=message.reply_to_message.message_thread_id,
                                     text='‚úÖ –ê–¥—Ä–µ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ',
                                     reply_markup=buttons.close_request_btns())
                else:
                    bot.send_message(chat_id=config.get_config()['group_id'],
                                     message_thread_id=message.reply_to_message.message_thread_id,
                                     text='‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥! ‚ùå')
            elif group_code == 1:
                if verify_user_text(user_input):
                    db_actions.set_group_system_key(user_id, "reason_reject_admin", user_input)
                    bot.send_message(chat_id=config.get_config()['group_id'],
                                     message_thread_id=message.reply_to_message.message_thread_id,
                                     text='‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã —É–∫–∞–∑–∞–Ω–∞! ‚úÖ', reply_markup=buttons.close_application_btns())

    bot.polling(none_stop=True)


if '__main__' == __name__:
    os_type = platform.system()
    work_dir = os.path.dirname(os.path.realpath(__file__))
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    db = DB(config.get_config()['db_file_name'], Lock())
    db_actions = DbAct(db, config, config.get_config()['xlsx_path'])
    bot = telebot.TeleBot(config.get_config()['tg_api'])
    main()
