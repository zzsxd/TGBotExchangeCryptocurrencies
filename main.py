import telebot
import os
import platform
import cryptocompare
import random
import coinaddrvalidator
from threading import Lock
from config_parser import ConfigParser
from frontend import Bot_inline_btns
from backend import DbAct
from db import DB

config_name = 'secrets.json'


def verify_user_text(user_input: str) -> bool:
    if user_input is not None and user_input != '':
        return True
    return False


def verify_user_value(user_input: str) -> bool:
    if not verify_user_text(user_input):
        return False
    try:
        int(user_input)
        return True
    except ValueError:
        return False


def validate_btc(address):
    try:
        y = coinaddrvalidator.validate('btc', address)
        if y.valid:
            return True
        else:
            return False
    except:
        return False


def validate_mir(card_number):
    if len(card_number) != 16:
        return False

    if not card_number.startswith('2'):
        return False

    def luhn_checksum(card_number):
        def digits_of(n):
            return [int(d) for d in str(n)]

        digits = digits_of(card_number)
        odd_digits = digits[-1::-2]
        even_digits = digits[-2::-2]
        checksum = sum(odd_digits)
        for d in even_digits:
            checksum += sum(digits_of(d * 2))
        return checksum % 10

    return luhn_checksum(card_number) == 0


from datetime import datetime


def get_current_time():
    return datetime.now().strftime("%d:%m:%Y, %H:%M")


def current_btc_price():
    price = cryptocompare.get_price('BTC', currency='RUB')
    return price['BTC']['RUB']


def create_topic():
    topic_id = telebot.TeleBot.create_forum_topic(bot, chat_id=config.get_config()['group_id'],
                                                  name=f'{message.from_user.first_name} '
                                                       f'{message.from_user.last_name} –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê',
                                                  icon_color=0x6FB9F0).message_thread_id
    bot.forward_message(chat_id=config.get_config()['group_id'], from_chat_id=message.chat.id, message_id=message.id,
                        message_thread_id=topic_id)
    db_actions.update_topic_id(user_id, topic_id)
    bot.send_message(chat_id=config.get_config()['group_id'], message_thread_id=topic_id, text='–ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞!‚úÖ\n'
                                                                                               '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ '
                                                                                               '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ!')
    bot.send_message(user_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ!')


def main():
    @bot.message_handler(commands=['start', 'admin', 'buy', 'sell', 'exchange'])
    def start(message):
        command = message.text.replace('/', '')
        user_id = message.from_user.id
        buttons = Bot_inline_btns()
        db_actions.add_user(user_id, message.from_user.first_name, message.from_user.last_name,
                            f'@{message.from_user.username}')
        db_actions.add_user_id(user_id)
        if command == 'start':
            bot.send_message(user_id,
                             '<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n'
                             'ü§ñ–Ø –±–æ—Ç –¥–ª—è <u>–ü—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏—è, –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</u> ‚úÖ\n\n'
                             '/buy - –ø–æ–∫—É–ø–∫–∞\n\n'
                             '/sell - –ø—Ä–æ–¥–∞–∂–∞\n\n'
                             '/exchange - –æ–±–º–µ–Ω',
                             parse_mode='HTML')
        elif command == 'buy':
            buy_buttons = db_actions.get_exchange_rates("buy")
            bot.send_message(user_id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n'
                                      '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:',
                             reply_markup=buttons.buy_crypto_btns(buy_buttons))
        elif command == 'sell':
            sell_buttons = db_actions.get_exchange_rates("sell")
            bot.send_message(user_id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n'
                                      '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:',
                             reply_markup=buttons.sell_crypto_btns(sell_buttons))
        elif command == 'exchange':
            exchange_buttons = db_actions.get_exchange_rates("exchange")
            bot.send_message(user_id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n'
                                      '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:',
                             reply_markup=buttons.exchange_crypto_btns(exchange_buttons))
        elif db_actions.user_is_admin(user_id):
            if command == 'admin':
                bot.send_message(user_id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!',
                                 reply_markup=buttons.admin_btns())

    @bot.callback_query_handler(func=lambda call: True)
    def callback(call):
        user_id = call.message.chat.id
        buttons = Bot_inline_btns()
        if db_actions.user_is_existed(user_id):
            if db_actions.user_is_admin(user_id):
                if call.data == 'add_exchange_rate':
                    db_actions.set_user_system_key(user_id, "admin_action", "add")
                    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å',
                                     reply_markup=buttons.select_exchange_direction())
                elif call.data == 'del_exchange_rate':
                    db_actions.set_user_system_key(user_id, "admin_action", "del")
                    bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å',
                                     reply_markup=buttons.select_exchange_direction())
                elif call.data[:6] == 'select':
                    direction = call.data[7:]
                    action = db_actions.get_user_system_key(user_id, "admin_action")
                    if action == "del":
                        direction_data = db_actions.get_exchange_rates(type=direction)
                        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                         reply_markup=buttons.direction_buttons(direction_data, admin=True))
                    elif action == "add":
                        db_actions.set_user_system_key(user_id, "admin_exchange_direction", direction)
                        db_actions.set_user_system_key(user_id, "index", 0)
                        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞")
                elif call.data[:17] == 'del_exchange_rate':
                    db_actions.del_exchange_rates(row_id=call.data[17:])
                    bot.send_message(user_id, "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
                elif call.data == "change_ratio":
                    db_actions.set_user_system_key(user_id, "index", 1)
                    bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—É—Ä—Å–∞ –¥–ª—è "
                                              f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ BTC = {current_btc_price()}")
                elif call.data == 'export':
                    db_actions.db_export_xlsx()
                    bot.send_document(user_id, open(config.get_config()['xlsx_path'], 'rb'))
                    os.remove(config.get_config()['xlsx_path'])
            if call.data[:3] == 'buy':
                bot.send_message(user_id, '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É!\n\n'
                                          f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {call.id}\n\n'
                                          f'–¶–µ–Ω–∞ –∑–∞ 1 {call.data} - bebra',
                                 reply_markup=buttons.buy_request_btns())
            elif call.data == 'quantity':
                db_actions.set_user_system_key(user_id, "index", 2)
                bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º–æ–π –∫—Ä–∏–ø—Ç—ã')
            elif call.data == 'address':
                db_actions.set_user_system_key(user_id, "index", 3)
                bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞')
            elif call.data == 'continue':
                datas_for_admin = db_actions.get_datas_for_admins(user_id)
                print(datas_for_admin)
                if datas_for_admin[0][1] is None:
                    bot.send_message(user_id, '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º–æ–π –∫—Ä–∏–ø—Ç—ã!')
                elif datas_for_admin[0][2] is None:
                    bot.send_message(user_id, '–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è!')
                else:
                    bot.send_message(user_id, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ!\n\n'
                                              f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {datas_for_admin[0][0]}\n\n'
                                              f'–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ {datas_for_admin[0][1]} –í–¢–° –∑–∞ 13454 –ú–ò–†. —Ä—É–±.\n'
                                              f'–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å '
                                              f'BTC: {datas_for_admin[0][2]}\n\n'
                                              f'–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 13454 —Ä.\n'
                                              f'–Ω–∞ –Ω–æ–º–µ—Ä <code>4536 6363 6262 6636</code>, –∫–∞—Ä—Ç–∞ –ú–ò–† –ï–≤–≥–µ–Ω–∏–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á –ö.\n\n'
                                              f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: "–Ø –æ–ø–ª–∞—Ç–∏–ª"\n'
                                              f'–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç', parse_mode='HTML',
                                     reply_markup=buttons.buy_btns())
            elif call.data == 'ibuy':
                name_user = db_actions.get_name_user(user_id)
                username_user = db_actions.get_user_id(user_id)
                datas_for_admin = db_actions.get_datas_for_admins(user_id)
                time_now = get_current_time()
                topic_id = telebot.TeleBot.create_forum_topic(bot, chat_id=config.get_config()['group_id'],
                                                              name=f'{name_user[0][0]} '
                                                                   f'{name_user[0][1]} –ü–û–ö–£–ü–ö–ê',
                                                              icon_color=0x6FB9F0).message_thread_id
                db_actions.update_topic_id(user_id, topic_id)
                bot.send_message(chat_id=config.get_config()['group_id'], message_thread_id=topic_id,
                                 text=f'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {datas_for_admin[0][0]}\n\n'
                                      f'–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {time_now}\n'
                                      f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username_user[0][0]}\n'
                                      f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ "—Ç—É—Ç —Ç–∏–ø–∞ –≤ –∫–∞–∫—É—é –∫—Ä–∏–ø—Ç—É –ø–µ—Ä–µ–≤–æ–¥–∏–º"\n'
                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç—ã: {datas_for_admin[0][1]}\n'
                                      f'–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: <code>{datas_for_admin[0][2]}</code>', parse_mode='HTML')
                bot.send_message(user_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, –æ–∂–∏–¥–∞–π—Ç–µ!')

    @bot.message_handler(content_types=['text', 'photo'])
    def text_message(message):
        user_input = message.text
        user_id = message.chat.id
        buttons = Bot_inline_btns()
        code = db_actions.get_user_system_key(user_id, "index")
        if db_actions.user_is_existed(user_id):
            if db_actions.user_is_admin(user_id):
                if code == 0:
                    if verify_user_text(user_input):
                        direction = db_actions.get_user_system_key(user_id, "admin_exchange_direction")
                        db_actions.add_exchange_rates(user_input, direction)
                        bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞")
                    else:
                        db_actions.set_user_system_key(user_id, "index", None)
                        bot.send_message(user_id, "–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç")
                elif code == 1:
                    if verify_user_value(user_input):
                        config.set_min_btc(current_btc_price() * user_input)
                    else:
                        db_actions.set_user_system_key(user_id, "index", None)
                        bot.send_message(user_id, "–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ")
            if code == 2:
                if verify_user_value(user_input):
                    db_actions.add_quantity_user(user_id, user_input)
                    bot.send_message(user_id, f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ {user_input} –∫—Ä–∏–ø—Ç—ã')
                else:
                    bot.send_message(user_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!')
            elif code == 3:
                if verify_user_text(user_input):
                    valid = validate_btc(user_input)
                    if valid:
                        db_actions.add_destination_address(user_id, user_input)
                        bot.send_message(user_id, '–£—Å–ø–µ—à–Ω–æ!')
                    else:
                        bot.send_message(user_id, '–ö–æ—à–µ–ª–µ–∫ –Ω–µ–≤–µ—Ä–µ–Ω!')
                else:
                    bot.send_message(user_id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!')

    bot.polling(none_stop=True)


if '__main__' == __name__:
    os_type = platform.system()
    work_dir = os.path.dirname(os.path.realpath(__file__))
    config = ConfigParser(f'{work_dir}/{config_name}', os_type)
    db = DB(config.get_config()['db_file_name'], Lock())
    db_actions = DbAct(db, config, config.get_config()['xlsx_path'])
    bot = telebot.TeleBot(config.get_config()['tg_api'])
    main()
